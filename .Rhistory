income <- c(20000, 40000, 30000, 45000, 60000)
balance <-c(5000, 12000, 23000, 14000, 6000)
m1 <- matrix(c(age,income,balance),bytow=T)
m1 <- matrix(c(age,income,balance),byrow=T)
m1 <- matrix(c(age,income,balance),nrow=5,ncol=3)
m1
m1[2,1]
sum(m1[,3])
m1[,2]/m1[,3]
name <- c("Meena", "Teena", "Kiran", "Nitin", "Harpreet", "Shaikh")
age <- c(23, 34, 26, 28, 25,18)
majorsubject <- c("Maths","English", "Science", "English", "Science", "Maths")
pass <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE)
age
students <- data.frame(c(name,age,majorsubject,pass))
students
students <- data.frame(c(name = name,age=age,majorsubject=majorsubject,pass=pass))
students
students <- data.frame(c(name = name,age=age,majorsubject=majorsubject,pass=pass),stringsAsFactors = FALSE)
student
students
students <- data.frame(name = name,age=age,majorsubject=majorsubject,pass=pass)\,stringsAsFactors = FALSE)
students <- data.frame(name = name,age=age,majorsubject=majorsubject,pass=pass,stringsAsFactors = FALSE)
students
gender <- c("Female", "Female", "Male", "Male", "Female", "Male")
overallpercentage<- c(54, 67, 46, 59, 64, 48)
data <- data.frame(gender, overallpercentage)
data
students <- cbind(students,data)
sudents
students
"my" + "apples"
"my" && "apples"
x = 4.65
class(x)
#Accessing Vector elements
my_vector <- c(3, 8, 9, 10)
my_vector[3]                           #Accessing 3rd element of my_vector
my_vector[2:4]                         #Accessing last 3 elements of my_vector
#Performing different Operations on vectors
my_vector1 <- c(1,3,5,7)
my_vector2 <- c(2,4,6,8)
added_vector <- my_vector1 + my_vector2
added_vector
#Applying functions on Vectors
my_vector1 <- c(1,3,5,7)
my_vector2 <- c(1, 3, 5, NA, 7, NA)
is.na(my_vector2)
hieghts <- c("medium", "short", "short", "tall", "medium", "medium")
hieghts
hieghts[1] <- "Ultra-short"
hieghts
hieghts <- c("medium", "short", "short", "tall", "medium", "medium")
factor_hieghts <- factor(hieghts)
factor_hieghts
levels(factor_hieghts)
factor_hieghts[1] <- "Ultra-short"     #This will not work
factor_hieghts
summary(factor_hieghts)
# say we create a numeric vector to store values of a die roll:
dice <- c(1, 2, 4, 5, 5, 3, 2, 6, 3, 5, 6, 2, 1, 4, 3, 6, 5, 3, 2, 2, 5)
#We can convert the vector into 6 factor levels.
dice_levels  <-  factor(dice)
dice_levels
summary(dice_levels)
# 5. mutate()
?mutate
# Tidyr
# install.packages("tidyr")
# install.packages("dplyr")
library(tidyr)
library(dplyr)
# 5. mutate()
?mutate
# See structure of the iris data frame
iris<-iris
View(iris)
# Plot Sepal length and width on x and y axes respectively
plot(iris$Sepal.Length,iris$Sepal.Width)
points(iris$Petal.Length,iris$Petal.Width, col="red")
plot(iris$Petal.Length,iris$Petal.Width, col=iris$Species,xlab="Niv", ylab="pritee")
par(mfrow = c(1,2))
par(mfrow = c(1,3))
plot(iris$Petal.Length, iris$Petal.Width, col = iris$Species, main = "iris", xlab = "Petal Length", ylab = "Petal Width")
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species, main = "iris", xlab = "Sepal Length", ylab = "Sepal Width")
# mtcars has observations of 32 cars with miles per gallon, cylinders, weight, no of gears etc.
mtcars <- mtcars
# Check structure of mtcars
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point()
ggplot(mtcars, aes(x=factor(cyl), y=mpg)) + geom_point()
# mtcars has observations of 32 cars with miles per gallon, cylinders, weight, no of gears etc.
mtcars <- mtcars
# Check structure of mtcars
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point()
#----------Creating Visualizations Using ggplot()------------
library(ggplot2)
# mtcars has observations of 32 cars with miles per gallon, cylinders, weight, no of gears etc.
mtcars <- mtcars
# Check structure of mtcars
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point()
ggplot(mtcars, aes(x=factor(cyl), y=mpg)) + geom_point()
ggplot(mtcars, aes(x=factor(am), y=mpg)) + geom_point()
ggplot(mtcars, aes(x = wt,y = mpg, col = factor(cyl))) + geom_point()
ggplot(mtcars, aes(x = wt,y = mpg, col = factor(cyl))) + geom_point(shape=12,size=3)
t
# Identify which elements are in data, aes() and geom layers4
# Note that there are no 5 or 7 cylinder cars, but the plot shows 5 and 7 on 5 axis. Why?
ggplot(mtcars, aes(x = wt,y = mpg)) + geom_text(aes(label=cyl))
ggplot(mtcars, aes(x = wt,y = mpg, col =hp ,size=disp)) + geom_point()
sepal_plot <- ggplot(iris, aes(x = Sepal.Length, Sepal.Width, col = Species))
sepal_plot + geom_point()
sepal_plot <- ggplot(iris, aes(x = Sepal.Length, Sepal.Width, col = Species, size = Petal.Length))
sepal_plot + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) + geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) + geom_point(col = "blue")
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl), label = cyl)) + geom_label()
ggplot(mtcars, aes(x = mpg)) + geom_histogram(binwidth = 1)
ggplot(mtcars, aes(x = mpg, fill = factor(am))) + geom_histogram(binwidth = 1)
ggplot(mtcars, aes(x = mpg, fill = factor(am))) + geom_histogram(position = "dodge", binwidth = 1)
ggplot(mtcars, aes(x = mpg, fill = factor(cyl))) +
geom_histogram(binwidth = 2) +  facet_wrap(~gear)
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 100) + facet_wrap(~cut)
# check missing libraries
missingLib <-
useLib[!(useLib %in% installed.packages()[,"Package"])]
# install missing libraries
if(length(missingLib)) install.packages(missingLib)
# checking current session information to represent current system and session information
sessionInfo()
# Removing all objects loaded in workspace before proceeding to work on the data
rm(list=ls())
#Importing relevant packages into the R-environment
library(stringr)
library(dplyr)
library(ggplot2)
library(cowplot)
library("car")
library("MASS")
library(caTools)
library(scales)
library(stats)
library(tidyr)
library(ROCR)
library(e1071)
library(caret)
setwd("D:/Data Science/Learning & Development/3.5 HR Analytics Case Study/PA-I_Case_Study_HR_Analytics")
#=============================================== [II] Data Understanding: ================================================
# Importing the datasets into R-environment
general_data<- read.csv("general_data.csv", stringsAsFactors = FALSE, na.strings = c("NA","na"))
employee_survey<- read.csv("employee_survey_data.csv", stringsAsFactors = FALSE, na.strings = c("NA","na"))
manager_survey<- read.csv("manager_survey_data.csv", stringsAsFactors = FALSE, na.strings = c("NA","na"))
in_punch<- read.csv("in_time.csv", stringsAsFactors = FALSE, na.strings = c("NA","na"))
out_punch<- read.csv("out_time.csv", stringsAsFactors = FALSE, na.strings = c("NA","na"))
# Understanding the structure of the dataset:
str(general_data) #4410 obs. of  24 variables including the target variable Attrition
str(employee_survey) #4410 obs. of  4 variables
str(manager_survey) #4410 obs. of  3 variables
# The structure of in_punch and out_punch reveal that the first column in Employee ID followed by date and time information for the working days between 1st Jan to 19th May 2015.
# They each contain 4410 obs. with 261 days of timestamp data.
colnames(in_punch)[1]<- "EmployeeID"
colnames(out_punch)[1]<- "EmployeeID"
# Data Dictionary is already provided, our analysis and data understanding is inline with it.
# Checking if EmployeeID is the primary key for all 5 tables
if(length(unique(employee_survey$EmployeeID))==nrow(employee_survey)){paste("Primary Key : EmployeeID, Table : employee_survey")}
if(length(unique(general_data$EmployeeID))==nrow(general_data)){paste("Primary Key : EmployeeID, Table : general_data")}
if(length(unique(manager_survey$EmployeeID))==nrow(manager_survey)){paste("Primary Key : EmployeeID, Table : manager_survey")}
if(length(unique(in_punch$EmployeeID))==nrow(in_punch)){paste("Primary Key : EmployeeID, Table : in_punch")}
if(length(unique(out_punch$EmployeeID))==nrow(out_punch)){paste("Primary Key : EmployeeID, Table : out_punch")}
setdiff(general_data$EmployeeID, employee_survey$EmployeeID)
setdiff(general_data$EmployeeID, manager_survey$EmployeeID)
setdiff(general_data$EmployeeID, in_punch$EmployeeID)
setdiff(general_data$EmployeeID, out_punch$EmployeeID)
# Checking for Data Duplication-This step is not required as we have already determined that Employee_ID is the primary key for all the tables
# and the number of unique Employee_ID is equal to the number of rows in each table but for the regular practise it is required to check the duplicacy of data
sum(duplicated(employee_survey))
sum(duplicated(general_data))
sum(duplicated(manager_survey))
sum(duplicated(in_punch))
sum(duplicated(out_punch))
# Checking for Missing Values or NA
sapply(employee_survey, function(x) sum(is.na(x)))
# cleaning NA for Environment Satisfaction(replace with median)
employee_survey$EnvironmentSatisfaction[which(is.na(employee_survey$EnvironmentSatisfaction))]<-median(employee_survey$EnvironmentSatisfaction,na.rm = TRUE)
#cleaning NA for Job Satisfaction(replace with median)
employee_survey$JobSatisfaction[which(is.na(employee_survey$JobSatisfaction))]<-median(employee_survey$JobSatisfaction,na.rm = TRUE)
#cleaning NA for Job Satisfaction(replace with median)
employee_survey$WorkLifeBalance[which(is.na(employee_survey$WorkLifeBalance))]<-median(employee_survey$WorkLifeBalance,na.rm = TRUE)
sapply(general_data, function(x) sum(is.na(x)))
# there are 28 missing values in the general_survey dataset specifically in the NumCompaniesWorked and TotalWorkingYears columns.
#cleaning NA for NumCompaniesWorked(replace with mean)
general_data$NumCompaniesWorked[which(is.na(general_data$NumCompaniesWorked))]<-mean(general_data$NumCompaniesWorked,na.rm = TRUE)
#cleaning NA for TotalWorkingYears(replace with mean)
general_data$TotalWorkingYears[which(is.na(general_data$TotalWorkingYears))]<-mean(general_data$TotalWorkingYears,na.rm = TRUE)
sapply(manager_survey, function(x) sum(is.na(x)))
in_punch<- in_punch[vapply(in_punch, function(datachop) length(unique(datachop))>1, logical(1L))]
out_punch<- out_punch[vapply(out_punch, function(datachop) length(unique(datachop))>1, logical(1L))]
# Creating a new dataframe titled worked_hours to store the totalhours worked per-day by the employee
worked_hours<- data.frame("EmployeeID"= in_punch$EmployeeID)
for(sb in 2:ncol(in_punch))
{
in_punch[,sb]<- as.POSIXct(in_punch[,sb], "%Y-%m-%d %H:%M:%S")
out_punch[,sb]<- as.POSIXct(out_punch[,sb], "%Y-%m-%d %H:%M:%S")
worked_hours[,sb]<- round(out_punch[,sb]-in_punch[,sb],1)
colnames(worked_hours)[sb]<- colnames(out_punch)[sb]
}
# Deriving metrics for Total Number of Leaves, Average working hours per day per year, Total Working Hours and Average Hours worked
# excess of Standard Hours[i.e 8 hrs.]
worked_hours <- gather(worked_hours, key = "Date",
value = "logged_hours", 2:ncol(worked_hours))
worked_hours$Date <- substr(worked_hours$Date, 2, 1000)
worked_hours$Date <- as.Date(worked_hours$Date, "%Y.%m.%d")
worked_hours$month <- format(worked_hours$Date,"%m")
employee_punch_log <- worked_hours %>% group_by(EmployeeID) %>%
summarise(Tot.logged.hours = sum(logged_hours, na.rm = TRUE),
Avg.logged.hours = round(mean(logged_hours, na.rm = TRUE),2),
Tot.leaves.taken = sum(is.na(logged_hours)),
Tot.excess.logged = abs(sum(logged_hours - 8, na.rm = TRUE)),
Avg.excess.logged = abs(round(mean(logged_hours - 8, na.rm = TRUE),2)))
str(employee_punch_log)
# Merging the employee_survey, general_data, manager_survey based and emp_logging on Enployee ID and title it as main_data
main_data<- merge(general_data, employee_survey, by="EmployeeID", all = FALSE)
main_data<- merge(main_data, manager_survey, by="EmployeeID", all = FALSE)
main_data<- merge(main_data, employee_punch_log, by="EmployeeID", all = FALSE)
write.csv(main_data,"hr_master.csv")
# Removing unnecessary objects from the workspace as we have already created our main_data frame and to release memory allocated
rm(employee_survey)
rm(manager_survey)
rm(general_data)
rm(in_punch)
rm(out_punch)
rm(worked_hours)
rm(employee_punch_log)
# We will convert all character attribute records to upper case to avoid any case sensititve inconsistancies and data entry discrepancies.
# The case conversion will be done using a custom defined function ConvertToUpper
# Function Name : ConovertToUpper
# Input : Name of the column
# Output : Column will be converted to upper case
ConvertToUpper <- function(col_input)
{
if(is.character(col_input)==T)
{
col_input<- toupper(col_input)
}
return(col_input)
}
for(sb in 1:ncol(main_data))
{
main_data[,sb]<- ConvertToUpper(main_data[,sb])
}
# Exploratory Data Analysis of main_data
# Overview of Attrition
overall_status<-ggplot(main_data, aes(x=as.factor(main_data$Attrition), fill= factor(main_data$Attrition)))+  geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(labels = percent) +
labs(title = "Plot1. Attrition Rate of Employees", y = "Percentage of Total Employees", x = "Attrition Status") + geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = "count", vjust=-0.3)+
scale_fill_discrete(name = "Attrition Status")
overall_status
#-------------------------------------- EDA of CATEGORICAL ATTRIBUTES -------------------------------------------------------------------------------------------------------------------------------
# 1. BusinessTravel vs Attrition
bus_travel_count<-ggplot(data = main_data, aes(reorder(BusinessTravel, -table(BusinessTravel)[BusinessTravel]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3)+ xlab("Business Travel Status")+ylab("Count of Employees") + ggtitle("Plot2. BusinessTravel vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
bus_travel_count
bus_travel_attr<-ggplot(data= main_data, aes(x= Attrition,  group=BusinessTravel)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~BusinessTravel) + scale_y_continuous(labels = scales::percent) + xlab("Business Travel wise Attrition")+ylab("Percentage of Employees") + ggtitle("Plot1. Business Travel V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
bus_travel_attr
#2. Department vs Attrition
dept_count<-ggplot(data = main_data, aes(reorder(Department, -table(Department)[Department]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.01,hjust=0.5)+ xlab("Department")+ylab("Count of Employees") + ggtitle("Plot2. Department vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
dept_count
dept_attr<-ggplot(data= main_data, aes(x= Attrition,  group=Department)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.1) +
labs(y = "Percent", fill="Attrition") + facet_grid(~Department) + scale_y_continuous(labels = scales::percent) + xlab("Department")+ylab("Percentage of Employees") + ggtitle("Plot3. Department V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
dept_attr
#3. Education Level vs. Attrition
main_data$Education<- as.character(main_data$Education)
main_data$Education<- gsub(pattern = "1", replacement = "BELOW_COLLEGE", main_data$Education)
main_data$Education<- gsub(pattern = "2", replacement = "COLLEGE", main_data$Education)
main_data$Education<- gsub(pattern = "3", replacement = "BACHELOR", main_data$Education)
main_data$Education<- gsub(pattern = "4", replacement = "MASTER", main_data$Education)
main_data$Education<- gsub(pattern = "5", replacement = "DOCTOR", main_data$Education)
edu_count<-ggplot(data = main_data, aes(reorder(Education, -table(Education)[Education]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3)+ xlab("Education Level")+ylab("Count of Employees") + ggtitle("Plot3. Education_Level vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
edu_count
edu_attr<-ggplot(data= main_data, aes(x= Attrition,  group=Education)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.1,hjust=0.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~Education) + scale_y_continuous(labels = scales::percent) + xlab("Education Level")+ylab("Percentage of Employees") + ggtitle("Plot7. Education Level V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
edu_attr
#4. Education Field vs. Attrition
field_edu_count<- ggplot(data = main_data, aes(reorder(EducationField, -table(EducationField)[EducationField]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3,position = position_dodge(width = 1))+ xlab("Field of Education")+ylab("Count of Employees") + ggtitle("Plot4. Field of Education vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
field_edu_count
field_edu_attr<-ggplot(data= main_data, aes(x= Attrition,  group=EducationField)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.1,hjust=0.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~EducationField) + scale_y_continuous(labels = scales::percent) + xlab("Field of Education")+ylab("Percentage of Employees") + ggtitle("Plot9. Field of Education V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
field_edu_attr
#5. Gender vs. Attrition
gender_count<- ggplot(data = main_data, aes(reorder(Gender, -table(Gender)[Gender]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3,position = position_dodge(width = 1))+ xlab("Gender of Employee")+ylab("Count of Employees") + ggtitle("Plot5. Gender vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
gender_count
gender_attr<-ggplot(data= main_data, aes(x= Attrition,  group=Gender)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~Gender) + scale_y_continuous(labels = scales::percent) + xlab("Gender of Employee")+ylab("Percentage of Employees") + ggtitle("Plot11. Gender V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
gender_attr
#6. Job Level vs. Attrition
job_lev_count<- ggplot(data = main_data, aes(reorder(JobLevel, -table(JobLevel)[JobLevel]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3,position = position_dodge(width = 1))+ xlab("Job Level of Employee")+ylab("Count of Employees") + ggtitle("Plot6. Job Level of Employee vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
job_lev_count
job_lev_attr<- ggplot(data= main_data, aes(x= Attrition,  group=JobLevel)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~JobLevel) + scale_y_continuous(labels = scales::percent) + xlab("Job Level of Employee")+ylab("Percentage of Employees") + ggtitle("Plot13. Job Level of Employees V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
job_lev_attr
#7. Job Role vs. Attrition
job_role_count<- ggplot(data = main_data, aes(reorder(JobRole, -table(JobRole)[JobRole]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3,position = position_dodge(width = 1))+ xlab("Job Role of Employee")+ylab("Count of Employees") + ggtitle("Plot7. Job Role of Employee vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
job_role_count
job_role_attr<- ggplot(data= main_data, aes(x= Attrition,  group=JobRole)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~JobRole) + scale_y_continuous(labels = scales::percent) + xlab("Job Role of Employee")+ylab("Percentage of Employees") + ggtitle("Plot15. Job Role of Employees V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
job_role_attr
#8. Marital Status vs. Attrition
maritial_count<- ggplot(data = main_data, aes(reorder(MaritalStatus, -table(MaritalStatus)[MaritalStatus]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3,position = position_dodge(width = 1))+ xlab("Marital Status of Employee")+ylab("Count of Employees") + ggtitle("Plot8. Marital Status of Employee vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
maritial_count
maritial_attr<- ggplot(data= main_data, aes(x= Attrition,  group=MaritalStatus)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~MaritalStatus) + scale_y_continuous(labels = scales::percent) + xlab("Marital Status of Employee")+ylab("Percentage of Employees") + ggtitle("Plot17. Marital Status of Employees V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
maritial_attr
#9. StockOptionLevel vs. Attrition
main_data$StockOptionLevel<- factor(main_data$StockOptionLevel)
stock_lev_count<- ggplot(data = main_data, aes(reorder(StockOptionLevel, -table(StockOptionLevel)[StockOptionLevel]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3,position = position_dodge(width = 1))+ xlab("Stock Option Level of Employee")+ylab("Count of Employees") + ggtitle("Plot9. Stock Option Level of Employee vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
stock_lev_count
stock_lev_attr<- ggplot(data= main_data, aes(x= Attrition,  group=StockOptionLevel)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~StockOptionLevel) + scale_y_continuous(labels = scales::percent) + xlab("Stock Option Level of Employee")+ylab("Percentage of Employees") + ggtitle(" Stock Option Level of Employees V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
stock_lev_attr
#10. Work Environment Satisfaction vs. Attrition
main_data$EnvironmentSatisfaction<- as.character(main_data$EnvironmentSatisfaction)
main_data$EnvironmentSatisfaction<- gsub(pattern = "1", replacement = "LOW", main_data$EnvironmentSatisfaction)
main_data$EnvironmentSatisfaction<- gsub(pattern = "2", replacement = "MEDIUM", main_data$EnvironmentSatisfaction)
main_data$EnvironmentSatisfaction<- gsub(pattern = "3", replacement = "HIGH", main_data$EnvironmentSatisfaction)
main_data$EnvironmentSatisfaction<- gsub(pattern = "4", replacement = "VERY_HIGH", main_data$EnvironmentSatisfaction)
env_sat_count<- ggplot(data = main_data, aes(reorder(EnvironmentSatisfaction, -table(EnvironmentSatisfaction)[EnvironmentSatisfaction]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3,position = position_dodge(width = 1))+ xlab("Environment Satisfaction of Employee")+ylab("Count of Employees") + ggtitle("Plot20. Environment Satisfaction of Employee vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
env_sat_count
env_sat_attr<- ggplot(data= main_data, aes(x= Attrition,  group=EnvironmentSatisfaction)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~EnvironmentSatisfaction) + scale_y_continuous(labels = scales::percent) + xlab("Environment Satisfaction of Employee")+ylab("Percentage of Employees") + ggtitle("Plot21. Work Environment Satisfaction Level of Employees V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
env_sat_attr
#11. Job satisfaction Level vs. Attrition
main_data$JobSatisfaction<- as.character(main_data$JobSatisfaction)
main_data$JobSatisfaction<- gsub(pattern = "1", replacement = "LOW", main_data$JobSatisfaction)
main_data$JobSatisfaction<- gsub(pattern = "2", replacement = "MEDIUM", main_data$JobSatisfaction)
main_data$JobSatisfaction<- gsub(pattern = "3", replacement = "HIGH", main_data$JobSatisfaction)
main_data$JobSatisfaction<- gsub(pattern = "4", replacement = "VERY_HIGH", main_data$JobSatisfaction)
job_sat_count
main_data$JobInvolvement<- gsub(pattern = "1", replacement = "LOW", main_data$JobInvolvement)
job_sat_count<- ggplot(data = main_data, aes(reorder(JobSatisfaction, -table(JobSatisfaction)[JobSatisfaction]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3,position = position_dodge(width = 1))+ xlab("Job Satisfaction of Employee")+ylab("Count of Employees") + ggtitle("Plot22. Job Satisfaction Level of Employee vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
job_sat_attr<- ggplot(data= main_data, aes(x= Attrition,  group=JobSatisfaction)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~JobSatisfaction) + scale_y_continuous(labels = scales::percent) + xlab("Job Satisfaction of Employee")+ylab("Percentage of Employees") + ggtitle("Plot23. Job Satisfaction Level of Employees V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
job_sat_attr
#12. Job Involvement Level vs. Attrition
main_data$JobInvolvement<- as.character(main_data$JobInvolvement)
main_data$JobInvolvement<- gsub(pattern = "2", replacement = "MEDIUM", main_data$JobInvolvement)
main_data$JobInvolvement<- gsub(pattern = "3", replacement = "HIGH", main_data$JobInvolvement)
main_data$JobInvolvement<- gsub(pattern = "4", replacement = "VERY_HIGH", main_data$JobInvolvement)
job_involve_count<- ggplot(data = main_data, aes(reorder(JobInvolvement, -table(JobInvolvement)[JobInvolvement]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3,position = position_dodge(width = 1))+ xlab("Job Involvement of Employee")+ylab("Count of Employees") + ggtitle("Plot24. Job Involvement Level of Employee vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
job_involve_count
job_involve_attr<- ggplot(data= main_data, aes(x= Attrition,  group=JobInvolvement)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~JobInvolvement) + scale_y_continuous(labels = scales::percent) + xlab("Job Involvement Level of Employee")+ylab("Percentage of Employees") + ggtitle("Plot25. Job Involvement Level of Employees V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
job_involve_attr
#13. Work-Life Balance vs. Attrition
main_data$WorkLifeBalance<- as.character(main_data$WorkLifeBalance)
main_data$WorkLifeBalance<- gsub(pattern = "1", replacement = "BAD", main_data$WorkLifeBalance)
main_data$WorkLifeBalance<- gsub(pattern = "2", replacement = "GOOD", main_data$WorkLifeBalance)
main_data$WorkLifeBalance<- gsub(pattern = "3", replacement = "BETTER", main_data$WorkLifeBalance)
main_data$WorkLifeBalance<- gsub(pattern = "4", replacement = "BEST", main_data$WorkLifeBalance)
work_life_count<- ggplot(data = main_data, aes(reorder(WorkLifeBalance, -table(WorkLifeBalance)[WorkLifeBalance]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3,position = position_dodge(width = 1))+ xlab("Work-Life Balance Level of Employee")+ylab("Count of Employees") + ggtitle("Plot26. Work-Life Balance Level of Employee vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
work_life_count
#38 records with missing Work-Life Balance Levels
work_life_attr<- ggplot(data= main_data, aes(x= Attrition,  group=WorkLifeBalance)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~WorkLifeBalance) + scale_y_continuous(labels = scales::percent) + xlab("Work-Life Balance Level of Employee")+ylab("Percentage of Employees") + ggtitle("Plot27. Work-Life Balance of Employees V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
work_life_attr
#14. Performance Rating vs. Attrition
main_data$PerformanceRating<- as.character(main_data$PerformanceRating)
main_data$PerformanceRating<- gsub(pattern = "1", replacement = "LOW", main_data$PerformanceRating)
main_data$PerformanceRating<- gsub(pattern = "2", replacement = "GOOD", main_data$PerformanceRating)
main_data$PerformanceRating<- gsub(pattern = "3", replacement = "EXCELLENT", main_data$PerformanceRating)
main_data$PerformanceRating<- gsub(pattern = "4", replacement = "OUTSTANDING", main_data$PerformanceRating)
perf_rat_count<- ggplot(data = main_data, aes(reorder(PerformanceRating, -table(PerformanceRating)[PerformanceRating]), fill=main_data$Attrition)) + geom_bar(stat="count", position = "dodge")+ geom_text(stat='count',aes(label=..count..),vjust=-0.3,-1)+ xlab("Performance Rating Level of Employee")+ylab("Count of Employees") + ggtitle("Plot28. Performance Rating Level of Employee vs. Count of Employees")+ scale_y_continuous()+ scale_fill_discrete(name = "Attrition_Status")
perf_rat_count
perf_rat_attr<- ggplot(data= main_data, aes(x= Attrition,  group=PerformanceRating)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + geom_text(aes( label = scales::percent(..prop..),y= ..prop.. ), stat= "count", vjust = -.5) +
labs(y = "Percent", fill="Attrition") + facet_grid(~PerformanceRating) + scale_y_continuous(labels = scales::percent) + xlab("Performance Rating Level of Employee")+ylab("Percentage of Employees") + ggtitle("Plot29. Performance Rating of Employees V/s Attrition Status") + scale_fill_discrete(name = "Attrition 1=No | 2=Yes")
perf_rat_attr
#1. Age vs. Attrition
summary(main_data$Age)
boxplot(main_data$Age)
quantile(main_data$Age, seq(0,1,0.01))
#Age Parameter does not have any outliers.
age_hist<- ggplot(main_data, aes(x = main_data$Age, fill=main_data$Attrition)) + geom_histogram(binwidth = 2,col = "red")+ xlab("Age of Employee") + ylab("Frequency") + ggtitle("Plot30. Frequency Plot of Age of Employee")+scale_fill_discrete(name = "Attrition_Status")
age_hist
age_attr<- ggplot(main_data, aes(x=as.factor(main_data$Attrition), y=main_data$Age))+ geom_boxplot()+ xlab("Attrition_Status")+ylab("Age of Employee") + ggtitle("Plot31. Age of Employees V/s Attrition Status")
age_attr
#2. Distance From Home vs. Attrition
summary(main_data$DistanceFromHome)
boxplot(main_data$DistanceFromHome)
quantile(main_data$DistanceFromHome, seq(0,1,0.01))
#Distance From Home does not have any distinct outliers. We will choose not to treat it.
distfrmhome_hist<- ggplot(main_data, aes(x = main_data$DistanceFromHome, fill=main_data$Attrition)) + geom_histogram(binwidth = 2,col = "red")+ xlab("Distance from Home") + ylab("Frequency") + ggtitle("Plot32. Frequency Plot of Distance From Home")+scale_fill_discrete(name = "Attrition_Status")
distfrmhome_hist
distfrmhome_attr<- ggplot(main_data, aes(x=as.factor(main_data$Attrition), y=main_data$DistanceFromHome))+ geom_boxplot()+ xlab("Attrition_Status")+ylab("Distance from Home") + ggtitle("Plot33. Distance from Home of Employees V/s Attrition Status")
distfrmhome_attr
#3. Monthly Income vs. Attrition
summary(main_data$MonthlyIncome)
boxplot(main_data$MonthlyIncome)
#There are outliers on the upper end for Monthly Income
quantile(main_data$MonthlyIncome, seq(0,1,0.01))
income_hist<- ggplot(main_data, aes(x = main_data$MonthlyIncome, fill=main_data$Attrition)) + geom_histogram(binwidth = 10000,col = "red")+ xlab("Monthly Income of Employee") + ylab("Frequency") + ggtitle("Plot34. Frequency Plot of Monthly Income of Employee")+scale_fill_discrete(name = "Attrition_Status")
income_attr<- ggplot(main_data, aes(x=as.factor(main_data$Attrition), y=main_data$MonthlyIncome))+ geom_boxplot()+ xlab("Attrition Status")+ylab("Monthly Income of Employee") + ggtitle("Plot35. Monthly Income of Employees V/s Attrition Status")
income_hist
income_attr
#4. Num Companies Worked vs. Attrition
summary(main_data$NumCompaniesWorked)
#19 records with missing Num Companies Worked values
boxplot(main_data$NumCompaniesWorked)
quantile(main_data$NumCompaniesWorked, seq(0,1,0.01), na.rm = TRUE)
#No distinct outliers we will not treat this column
num_comp_hist<- ggplot(data = subset(main_data, is.na(main_data$NumCompaniesWorked)==FALSE), aes(x = as.factor(NumCompaniesWorked), fill=Attrition)) + geom_histogram(stat = "count", col = "red")+ xlab("Number of Companies previously worked In") + ylab("Frequency") + ggtitle("Plot36. Frequency Plot of Number of Companies previously Worked In")+scale_fill_discrete(name = "Attrition_Status")
num_comp_hist
#Employees who have worked in less than 2 companies or more than 8 companies are at a higher risk of attrition
num_comp_attr<- ggplot(data = subset(main_data, is.na(main_data$NumCompaniesWorked)==FALSE), aes(x=as.factor(Attrition), y=NumCompaniesWorked))+ geom_boxplot()+ xlab("Attrition Status")+ylab("Number of Companies previously worked In") + ggtitle("Plot37. Number of Companies previously Worked In V/s Attrition Status")
num_comp_attr
#5. Percentage Salary Hike vs. Attrition
summary(main_data$PercentSalaryHike)
boxplot(main_data$PercentSalaryHike)
#No distinct outliers in PercentSalaryHike
quantile(main_data$PercentSalaryHike, seq(0,1,0.01))
salary_hike_hist<- ggplot(main_data, aes(x = main_data$PercentSalaryHike, fill=main_data$Attrition)) + geom_histogram(binwidth = 2,col = "red")+ xlab("Salary Hike Percentage of Employee") + ylab("Frequency") + ggtitle("Plot38. Frequency Plot for Salary Hike Percentage of Employee")+scale_fill_discrete(name = "Attrition_Status")
salary_hike_hist
salary_hike_attr<- ggplot(main_data, aes(x=as.factor(main_data$Attrition), y=main_data$PercentSalaryHike))+ geom_boxplot()+ xlab("Attrition Status")+ylab("Salary Hike Percentage of Employee") + ggtitle("Plot39. Salary Hike Percentage of Employee V/s Attrition Status")
salary_hike_attr
#6. Total Working Years vs. Attrition
summary(main_data$TotalWorkingYears)
#9 records with missing Total Working Years data
boxplot(main_data$TotalWorkingYears)
#There are Outliers on the Higher Side
quantile(main_data$TotalWorkingYears, seq(0,1,0.01), na.rm = TRUE)
#Outlier Treatment: Capping all Total Working Years >32 years at 32
main_data$TotalWorkingYears[which(main_data$TotalWorkingYears>32)]<- 32
totworkyr_hist<- ggplot(data = subset(main_data, is.na(main_data$TotalWorkingYears)==FALSE), aes(x = TotalWorkingYears, fill=Attrition)) + geom_histogram(binwidth = 2, col = "red")+ xlab("Total Working Years") + ylab("Frequency") + ggtitle("Plot40. Frequency Plot of Total Working Years")+scale_fill_discrete(name = "Attrition_Status")
totworkyr_hist
totworkyr_attr<- ggplot(data = subset(main_data, is.na(main_data$TotalWorkingYears)==FALSE), aes(x=as.factor(Attrition), y=TotalWorkingYears))+ geom_boxplot()+ xlab("Attrition Status")+ylab("Total Working Years") + ggtitle("Plot41. Total Working Years V/s Attrition Status")
totworkyr_attr
#7. Training Times Last Year vs. Attrition
summary(main_data$TrainingTimesLastYear)
boxplot(main_data$TrainingTimesLastYear)
#There are outliers on both upper and lower ends of the boxplot However we will choose not to treat it as the range is low and to avoid data clumping
quantile(main_data$TrainingTimesLastYear, seq(0,1,0.01))
trntimelyr_hist<- ggplot(main_data, aes(x = main_data$TrainingTimesLastYear, fill=main_data$Attrition)) + geom_histogram(binwidth = 1,col = "red")+ xlab("Number of Times employee was Trained Last Year") + ylab("Frequency") + ggtitle("Plot42. Frequency Plot for Training Times Last Year")+scale_fill_discrete(name = "Attrition_Status")
trntimelyr_hist
trntimelyr_attr<- ggplot(main_data, aes(x=as.factor(main_data$Attrition), y=main_data$TrainingTimesLastYear))+ geom_boxplot()+ xlab("Attrition Status")+ylab("Training frequency of Employee") + ggtitle("Plot43. Training Frequency Last Year V/s Attrition Status")
trntimelyr_attr
#8. Years At Company vs. Attrition
summary(main_data$YearsAtCompany)
boxplot(main_data$YearsAtCompany)
#There seem to be significant outliers in the higher values of Years At Company
quantile(main_data$YearsAtCompany, seq(0,1,0.01))
#Outlier Treatment: We will cap Years At Company >25 at 25 [at 98 percentile]
main_data$YearsAtCompany[which(main_data$YearsAtCompany>25)]<- 25
yratcomp_hist<- ggplot(main_data, aes(x = main_data$YearsAtCompany, fill=main_data$Attrition)) + geom_histogram(binwidth = 2,col = "red")+ xlab("Number of Years since joining") + ylab("Frequency") + ggtitle("Plot44. Frequency Plot of Number of years since joining")+scale_fill_discrete(name = "Attrition_Status")
yratcomp_hist
yratcomp_attr<- ggplot(main_data, aes(x=as.factor(main_data$Attrition), y=main_data$YearsAtCompany))+ geom_boxplot()+ xlab("Attrition Status")+ylab("Number of Years since joining") + ggtitle("Plot45. Number of Years since joining V/s Attrition Status")
yratcomp_attr
#9. Years Since Last Promotion vs Attrition
summary(main_data$YearsSinceLastPromotion)
boxplot(main_data$YearsSinceLastPromotion)
#There are significant outliers on the upper values of YearsSinceLastPromotion
quantile(main_data$YearsSinceLastPromotion, seq(0,1,0.01))
yrsinceprom_hist<- ggplot(main_data, aes(x = main_data$YearsSinceLastPromotion, fill=main_data$Attrition)) + geom_histogram(binwidth = 2,col = "red")+ xlab("Number of years since Last Promotion") + ylab("Frequency") + ggtitle("Plot46. Frequency Plot of Number of years since Last Promotion")+scale_fill_discrete(name = "Attrition_Status")
#Outlier Treatment: Capping all YearsSinceLastPromotion >13 years as 13 years
main_data$YearsSinceLastPromotion[which(main_data$YearsSinceLastPromotion >11)]<-11
yrsinceprom_hist
yrsinceprom_attr<- ggplot(main_data, aes(x=as.factor(main_data$Attrition), y=main_data$YearsSinceLastPromotion))+ geom_boxplot()+ xlab("Attrition Status")+ylab("Number of years since Last Promotion") + ggtitle("Plot47. Number of years since Last Promotion V/s Attrition Status")
yrsinceprom_attr
#10. Years With CurrManager vs. Attrition
summary(main_data$YearsWithCurrManager)
boxplot(main_data$YearsWithCurrManager)
#There are some outliers on the higher values of Years With CurrManager
quantile(main_data$YearsWithCurrManager, seq(0,1,0.01))
yrswtcurmgr_hist<- ggplot(main_data, aes(x = main_data$YearsWithCurrManager, fill=main_data$Attrition)) + geom_histogram(binwidth = 2,col = "red")+ xlab("Years worked under current Manager") + ylab("Frequency") + ggtitle("Plot48. Frequency Plot of Years worked under current Manager")+scale_fill_discrete(name = "Attrition_Status")
yrswtcurmgr_hist
yrswtcurmgr_attr<- ggplot(main_data, aes(x=as.factor(main_data$Attrition), y=main_data$YearsWithCurrManager))+ geom_boxplot()+ xlab("Attrition Status")+ylab("Years worked under current Manager") + ggtitle("Plot49. Years worked under current Manager V/s Attrition Status")
yrswtcurmgr_attr
#11. Tot.leaves.taken vs. Attrition
summary(main_data$Tot.leaves.taken)
boxplot(main_data$Tot.leaves.taken)
leavestaken_hist<- ggplot(main_data, aes(x = main_data$Tot.leaves.taken, fill=main_data$Attrition)) + geom_histogram(binwidth=2, col = "red")+ xlab("Total Number of Leaves Taken by Employee") + ylab("Frequency") + ggtitle("Plot50. Frequency Plot of Total leaves taken by Employee")+scale_fill_discrete(name = "Attrition_Status")
leavestaken_attr<- ggplot(main_data, aes(x=as.factor(main_data$Attrition), y=main_data$Tot.leaves.taken))+ geom_boxplot()+ xlab("Attrition Status")+ylab("Total Number of Leaves Taken by Employee") + ggtitle("Plot51. Total Number of Leaves Taken by Employee V/s Attrition Status")
#Number of leaves taken doesn't have significant outliers
quantile(main_data$Tot.leaves.taken, seq(0,1,0.01))
leavestaken_hist
leavestaken_attr
#12. Tot.logged.hours vs. Attrition
main_data$Tot.logged.hours<- as.numeric(main_data$Tot.logged.hours)
boxplot(main_data$Tot.logged.hours)
#There are significant outliers in the upper region of Tot.logged.hours
quantile(main_data$Tot.logged.hours, seq(0,1,0.01))
#Outlier Treatment: Capping all Tot.logged.hours>2589 as 2590
main_data$Tot.logged.hours[which(main_data$Tot.logged.hours>2589)]<-2590
totloghrs_hist<- ggplot(main_data, aes(x = main_data$Tot.logged.hours, fill=main_data$Attrition)) + geom_histogram(binwidth=100, col = "red")+ xlab("Total Working hours logged by Employee") + ylab("Frequency") + ggtitle("Plot52. Frequency Plot of Total Working hours logged by Employee")+scale_fill_discrete(name = "Attrition_Status")
totloghrs_hist
totloghrs_attr<- ggplot(main_data, aes(x=as.factor(main_data$Attrition), y=main_data$Tot.logged.hours))+ geom_boxplot()+ xlab("Attrition Status")+ylab("Total Working hours logged by Employee") + ggtitle("Plot53. Total Working hours logged by Employee V/s Attrition Status")
totloghrs_attr
#13. Avg.logged.hours vs. Attrition
main_data$Avg.logged.hours<- as.numeric(main_data$Avg.logged.hours)
boxplot(main_data$Avg.logged.hours)
#There seems to be outliers on the higher values of Avg.logged.hours
quantile(main_data$Avg.logged.hours, seq(0,1,0.01))
avgloghrs_hist<- ggplot(main_data, aes(x = main_data$Avg.logged.hours, fill=main_data$Attrition)) + geom_histogram(binwidth=1, col = "red")+ xlab("Average Working hours logged by Employee per Day") + ylab("Frequency") + ggtitle("Plot54. Frequency Plot of Average Working hours logged by Employee")+scale_fill_discrete(name = "Attrition_Status")
